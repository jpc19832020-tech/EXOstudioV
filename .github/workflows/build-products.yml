name: Build and Deploy Products

on:
  push:
    branches: [ main ]
    paths:
      - 'data/products.csv'
      - 'Imagenes_de_productos/**'
      - 'src/app/productos/**'
      - 'src/components/product-*.tsx'
      - 'src/lib/csv-parser.ts'
      - 'src/types/product.ts'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Forzar reconstrucci√≥n completa'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: npm ci

      - name: Validate CSV structure
        run: |
          echo "Validando estructura del CSV..."
          if [ ! -f "data/products.csv" ]; then
            echo "‚ùå Error: No se encuentra el archivo data/products.csv"
            exit 1
          fi
          
          # Verificar encabezados requeridos
          headers=$(head -n 1 data/products.csv | tr -d '\r\n')
          required_headers="nombre;slug;categoria;descripcion_corta;caracteristicas;precio;moneda;imagenes;estado;cta_whatsapp"
          
          echo "Encabezados encontrados: $headers"
          echo "Encabezados requeridos: $required_headers"
          
          if [[ "$headers" != "$required_headers" ]]; then
            echo "‚ùå Error: Los encabezados del CSV no coinciden con la estructura requerida"
            exit 1
          fi
          
          # Validar n√∫mero de columnas en cada fila
          line_number=0
          while IFS= read -r line; do
            line_number=$((line_number + 1))
            if [[ $line_number -eq 1 ]]; then
              continue  # Saltar encabezado
            fi
            
            # Contar columnas separadas por punto y coma
            column_count=$(echo "$line" | grep -o ';' | wc -l)
            expected_columns=9  # 10 columnas = 9 separadores
            
            if [[ $column_count -ne $expected_columns ]]; then
              echo "‚ùå Error: L√≠nea $line_number tiene $((column_count + 1)) columnas, se esperan 10"
              echo "L√≠nea problem√°tica: $line"
              exit 1
            fi
            
          done < data/products.csv
          
          echo "‚úÖ Estructura del CSV v√°lida"

      - name: Validate images existence
        run: |
          echo "Validando existencia de im√°genes..."
          
          # Leer el CSV y verificar que las im√°genes existan
          line_number=0
          while IFS=';' read -r nombre slug categoria descripcion_corta caracteristicas precio moneda imagenes estado cta_whatsapp; do
            line_number=$((line_number + 1))
            
            # Saltar encabezado
            if [[ "$nombre" == "nombre" ]]; then
              continue
            fi
            
            # Validar campos requeridos
            if [[ -z "$nombre" || -z "$slug" || -z "$imagenes" ]]; then
              echo "‚ùå Error: L√≠nea $line_number tiene campos requeridos vac√≠os"
              echo "nombre: '$nombre', slug: '$slug', imagenes: '$imagenes'"
              exit 1
            fi
            
            # Solo procesar productos visibles
            if [[ "$estado" != "visible" ]]; then
              echo "‚è≠Ô∏è Omitiendo producto oculto: $nombre"
              continue
            fi
            
            # Verificar imagen principal
            IFS=',' read -ra IMAGE_ARRAY <<< "$imagenes"
            main_image="${IMAGE_ARRAY[0]}"
            
            if [[ -z "$main_image" ]]; then
              echo "‚ùå Error: El producto $nombre no tiene imagen principal"
              exit 1
            fi
            
            if [[ ! -f "$main_image" ]]; then
              echo "‚ùå Error: No se encuentra la imagen principal $main_image para el producto $nombre"
              exit 1
            else
              echo "‚úÖ Imagen encontrada: $main_image"
            fi
            
            # Verificar im√°genes adicionales si existen
            for ((i=1; i<${#IMAGE_ARRAY[@]}; i++)); do
              additional_image="${IMAGE_ARRAY[$i]}"
              if [[ -n "$additional_image" && ! -f "$additional_image" ]]; then
                echo "‚ö†Ô∏è Advertencia: No se encuentra la imagen adicional $additional_image para el producto $nombre"
              elif [[ -n "$additional_image" ]]; then
                echo "‚úÖ Imagen adicional encontrada: $additional_image"
              fi
            done
            
          done < data/products.csv
          
          echo "‚úÖ Validaci√≥n de im√°genes completada"

      - name: Test CSV parsing
        run: |
          echo "Probando parser de CSV..."
          
          # Crear script de prueba
          cat > test-csv-parser.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Simular el CSVParser para pruebas
          function parseCSV(csvContent) {
            const lines = csvContent.split('\n').filter(line => line.trim());
            if (lines.length < 2) return [];
            
            const headers = lines[0].split(';').map(h => h.trim());
            const products = [];
            
            for (let i = 1; i < lines.length; i++) {
              const values = lines[i].split(';').map(v => v.trim());
              const product = {};
              
              headers.forEach((header, index) => {
                product[header] = values[index] || '';
              });
              
              // Validar campos requeridos
              if (!product.nombre || !product.slug || !product.imagenes) {
                console.log(`‚ùå Producto inv√°lido l√≠nea ${i + 1}: campos requeridos faltantes`);
                continue;
              }
              
              if (product.estado !== 'visible') {
                console.log(`‚è≠Ô∏è Omitiendo producto oculto: ${product.nombre}`);
                continue;
              }
              
              // Validar imagen principal
              const imagenes = product.imagenes.split(',').map(img => img.trim());
              if (!fs.existsSync(imagenes[0])) {
                console.log(`‚ùå Imagen no encontrada: ${imagenes[0]} para producto ${product.nombre}`);
                continue;
              }
              
              products.push(product);
              console.log(`‚úÖ Producto v√°lido: ${product.nombre}`);
            }
            
            return products;
          }
          
          try {
            const csvPath = path.join(process.cwd(), 'data', 'products.csv');
            const csvContent = fs.readFileSync(csvPath, 'utf-8');
            const products = parseCSV(csvContent);
            
            console.log(`üéâ Se procesaron ${products.length} productos v√°lidos`);
            
            if (products.length === 0) {
              console.log('‚ö†Ô∏è No hay productos visibles para procesar');
            }
            
            process.exit(0);
          } catch (error) {
            console.log('‚ùå Error en el test del CSV parser:', error.message);
            process.exit(1);
          }
          EOF
          
          node test-csv-parser.js
          rm test-csv-parser.js

      - name: Build static site
        run: npm run build:static

      - name: Validate build output
        run: |
          echo "Validando salida del build..."
          
          # Verificar que se generaron las p√°ginas de productos
          if [ ! -f "out/productos/index.html" ]; then
            echo "‚ùå Error: No se gener√≥ la p√°gina de listado de productos"
            exit 1
          fi
          
          # Verificar que se generaron las p√°ginas de detalle
          product_count=$(grep -c "visible" data/products.csv)
          if [[ $product_count -gt 0 ]]; then
            echo "‚úÖ P√°gina de listado generada correctamente"
          else
            echo "‚ö†Ô∏è No hay productos visibles en el CSV"
          fi
          
          echo "‚úÖ Validaci√≥n del build completada"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Notify build status
        run: |
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Build y deploy completados exitosamente"
            echo "üåê Sitio disponible en: https://jpc19832020-tech.github.io/EXOstudioV/"
          else
            echo "‚ùå Error en el build o deploy"
            echo "Build result: ${{ needs.build.result }}"
            echo "Deploy result: ${{ needs.deploy.result }}"
            exit 1
          fi